{"version":3,"sources":["../../../src/api/controllers/factura.controller.js"],"names":["findAll","req","res","Factura","find","then","count","err","totalRegistros","status","json","ok","mensaje","facturas","catch","create","schema","Joi","object","keys","item","string","required","error","Error","qty","number","integer","date","due","rate","optional","tax","validate","body","value","details","factura","findOne","id","params","findById","delete","findByIdAndRemove","facturaDelete","update","findOneAndUpdate","_id","new","facturaUpdate"],"mappings":"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","file":"factura.controller.js","sourcesContent":["import Joi from 'joi';\r\nimport Factura from '../models/factura.model';\r\n\r\n\r\n\r\n\r\n// Todas las operaciones de facturas\r\nexport default {\r\n    // Obtiene todas las facturas\r\n    findAll(req, res) {\r\n        Factura.find().then(facturas => {\r\n                Factura.count((err, totalRegistros) => {\r\n                    if (err) {\r\n                        return res.status(500).json({\r\n                            ok: false,\r\n                            mensaje: 'Error al consultar registros'\r\n                        });\r\n                    }\r\n                    return res.status(200).json({\r\n                        ok: true,\r\n                        totalRegistros,\r\n                        facturas\r\n                    });\r\n                });\r\n            })\r\n            .catch(err => res.status(500).json({ ok: false, mensaje: err }));\r\n    },\r\n\r\n    // Crea una nueva factura\r\n    create(req, res) {\r\n        // let { item, qty, date, due, rate, tax } = req.body;\r\n\r\n        const schema = Joi.object().keys({\r\n            item: Joi.string().required().error(new Error()),\r\n            qty: Joi.number().integer().required().error(new Error()),\r\n            date: Joi.date().required().error(new Error()),\r\n            due: Joi.date().required().error(new Error()),\r\n            rate: Joi.number().optional(),\r\n            tax: Joi.number().optional()\r\n        });\r\n\r\n        const { error, value } = Joi.validate(req.body, schema);\r\n\r\n        if (error && error.details) {\r\n            return res.status(400).json({\r\n                ok: false,\r\n                mensaje: 'Error al insertar datos',\r\n                error\r\n            });\r\n        }\r\n\r\n        Factura.create(value)\r\n            .then(factura => {\r\n                return res.status(200).json({\r\n                    ok: true,\r\n                    mensaje: \"Datos guardados\",\r\n                    factura\r\n                });\r\n            })\r\n            .catch(err => { return res.status(500).json(err); });\r\n    },\r\n\r\n    // Busca una factura por su id\r\n    findOne(req, res) {\r\n        let { id } = req.params;\r\n\r\n        Factura.findById(id)\r\n            .then(factura => {\r\n                if (!factura) {\r\n                    return res.status(400).json({\r\n                        ok: false,\r\n                        mensaje: 'Erro al buscar la factura'\r\n                    });\r\n                }\r\n                return res.status(200).json({\r\n                    ok: true,\r\n                    factura\r\n                });\r\n\r\n            })\r\n            .catch(err => {\r\n                return res.status(500).json({\r\n                    ok: false,\r\n                    mensaje: 'Este id no existe',\r\n                    error: err\r\n                });\r\n            });\r\n\r\n    },\r\n\r\n    // Elimina una factura por su id\r\n    delete(req, res) {\r\n        let { id } = req.params;\r\n\r\n        Factura.findByIdAndRemove(id)\r\n            .then(facturaDelete => {\r\n                if (!facturaDelete) {\r\n                    return res.status(400).json({\r\n                        ok: false,\r\n                        mensaje: 'Error al eliminar esta factura',\r\n                        facturaDelete\r\n                    });\r\n                }\r\n                return res.status(200).json({\r\n                    ok: true,\r\n                    mensaje: 'Factura eliminada',\r\n                    facturaDelete\r\n                });\r\n\r\n            })\r\n            .catch(err => {\r\n                return res.status(500).json({\r\n                    ok: false,\r\n                    mensaje: 'Este id no existe',\r\n                    error: err\r\n                });\r\n            });\r\n\r\n    },\r\n\r\n    // Actualiza una factura por su id\r\n    update(req, res) {\r\n\r\n        let { id } = req.params;\r\n\r\n        const schema = Joi.object().keys({\r\n            item: Joi.string().optional(),\r\n            qty: Joi.number().integer().optional(),\r\n            date: Joi.date().optional(),\r\n            due: Joi.date().optional(),\r\n            rate: Joi.number().optional(),\r\n            tax: Joi.number().optional()\r\n        });\r\n\r\n        const { error, value } = Joi.validate(req.body, schema);\r\n\r\n        if (error && error.details) {\r\n            return res.status(400).json({\r\n                ok: false,\r\n                mensaje: 'Error al insertar datos',\r\n                error\r\n            });\r\n        }\r\n\r\n        Factura.findOneAndUpdate({ _id: id }, value, { new: true })\r\n            .then(facturaUpdate => {\r\n                // if (!usuario) {\r\n                //     return res.status(400).json({\r\n                //         ok: false,\r\n                //         mensaje: 'El usuario con id ' + id + ' no existe',\r\n                //         errors: { message: 'No existe un usuario con ese ID' }\r\n                //     });\r\n                // }\r\n                return res.status(200).json({\r\n                    ok: true,\r\n                    mensaje: \"Factura actualizada\",\r\n                    facturaUpdate\r\n                });\r\n            })\r\n            .catch(err => {\r\n                return res.status(500).json({\r\n                    ok: false,\r\n                    mensaje: 'Error al actualiza factura el id no existe',\r\n                    err\r\n                });\r\n            });\r\n    }\r\n};"]}